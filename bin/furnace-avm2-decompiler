#!/usr/bin/env ruby

require "rubygems"

root_dir = File.expand_path(File.join(File.dirname(__FILE__),'..'))
if File.directory?(File.join(root_dir,'.git'))
  Dir.chdir(root_dir) do |path|
    require 'bundler'

    begin
      Bundler.setup(:default)
    rescue Bundler::BundlerError => e
      warn e.message
      warn "Run `bundle install` to install missing gems"
      exit e.status_code
    end
  end
end

lib_dir = File.join(root_dir,'lib')
$LOAD_PATH << lib_dir unless $LOAD_PATH.include?(lib_dir)

require "trollop"
require "furnace-avm2"
require "thread"

include Furnace

DEBUG_INFO = %w(names funids)

opts = Trollop::options do
  version "furnace-avm2 #{AVM2::VERSION} decompiler"
  banner <<-EOS
  furnace-avm2-decompiler is a decompiler for ActionScript3 bytecode.

  Debugging information classes: #{DEBUG_INFO.join(", ")}.

  Usage: #{$0} [options]
EOS

  opt :input,         "Input file",                                 :type => :string, :required => true
  opt :verbose,       "Be verbose",                                 :default => false
  opt :debug,         "Show debugging information for <s+>.",       :type => :strings, :short => '-D'

  opt :threads,       "Use <i> threads for processing",             :default => 1

  opt :only,          "Only operate on classes <s+>",               :type => :strings, :short => '-O'
  opt :except,        "Operate on all classes except <s+>",         :type => :strings, :short => '-E'
  opt :grep,          "Search <s> (regexp) in class names",         :type => :string,  :short => '-G'

  opt :no_output,     "Don't write out any code",                   :default => false

  opt :decompile,     "Write ActionScript 3 code",                  :type => :boolean, :short => '-d'
  opt :destructurize, "Write internal token structure",             :type => :boolean, :short => '-s'
end

Trollop::die "Stray arguments: #{ARGV}" unless ARGV.empty?

decompile_options = {}

(opts[:debug] || []).each do |opt|
  Trollop::die "Unknown debug option #{opt}." unless DEBUG_INFO.include? opt

  decompile_options[:"debug_#{opt}"] = true
end

shound_skip = ->(obj) {
  (opts[:except]  && opts[:except].include?(obj.to_s)) ||
     (opts[:only] && !opts[:only].include?(obj.to_s))
}

$stderr.puts "Reading input data..."

abc = nil
File.open(opts[:input]) do |file|
  abc = AVM2::ABC::File.new
  abc.read(file)
end

if opts[:grep]
  regexp = Regexp.new(opts[:grep], Regexp::IGNORECASE)

  abc.instances.each do |inst|
    if inst.name.to_s =~ regexp
      if inst.interface?
        print "Iface "
      else
        print "Class "
      end

      print inst.name.to_s.ljust(30)

      if inst.super_name
        print " extends #{inst.super_name.to_s}"
      end

      puts
    end
  end

  exit
end

global_slots = {}

abc.scripts.each do |script|
  (script.slot_traits + script.const_traits).each do |trait|
    next if trait.idx == 0
    global_slots[trait.idx] = trait
  end
end

decompile_options[:global_slots] = global_slots

start_time = Time.now

mutex = Mutex.new

roots      = {}
workqueue  = abc.instances + abc.scripts
total_size = workqueue.size

last_percentage = 0

stat = {
  total:   0,
  success: 0,
  partial: 0,
  failed:  0,
}

$stderr.puts "Found #{total_size} classes and packages."

stick       = %w(| / - \\)
stick_state = 0
stick_timer = 0

progress_thread = Thread.new do
  loop do
    stick_timer += 1
    if stick_timer % 10 == 0
      $stderr.print "\e[KDecompiling... #{total_size - workqueue.size}/#{total_size} "
      $stderr.print stick[stick_state]
      $stderr.print "\e[0G"
      stick_state = (stick_state + 1) % stick.count
    end

    sleep
  end
end

opts[:threads].times.map do
  Thread.new do
    loop do
      what = nil
      mutex.synchronize do
        what = workqueue.pop
      end

      break if what.nil?

      if what.is_a? AVM2::ABC::InstanceInfo
        name = what.name
        ns   = name.ns
      else # ScriptInfo
        if what.has_name?
          name = what.package_name.ns
          ns   = name.to_s.sub(/(^|\.)[^.]+$/, '')
        else
          index = abc.scripts.index(what)
          name  = "__global_name_#{index}"
          ns    = "__global_ns_#{index}"
        end
      end
      next if shound_skip.(name)

      options = decompile_options.merge(
        stat: {
          total:   0,
          success: 0,
          partial: 0,
          failed:  0,
        }
      )

      source = what.decompile(options)
      next unless source
      next unless source.children.any?

      text = source.to_text

      mutex.synchronize do
        options[:stat].each do |facet, value|
          stat[facet] += value
        end

        roots[ns.to_s] ||= []
        roots[ns.to_s] << text

        progress_thread.wakeup
      end
    end
  end
end.each(&:join)

end_time = Time.now

if stat[:total] > 0
  $stderr.puts

  { "Decompiled"           => :success,
    "Partially decompiled" => :partial,
    "Failed"               => :failed,
  }.each do |facet_name, facet|
    $stderr.puts "#{facet_name.rjust(21)}: " \
        "#{stat[facet]}/#{stat[:total]} " \
        "(#{(stat[facet].to_f * 100 / stat[:total]).to_i}%)"
  end
else
  $stderr.puts "No methods were processed."
end

$stderr.puts "Time taken: #{"%.2f" % (end_time - start_time)}s"

unless opts[:no_output]
  roots.values.flatten.each do |code|
    puts code.gsub(/ +$/, '')
    puts
  end
end
